# 后台控制界面去创建一个配置（Data Id 的值为stock-service，我测试了一下不用服务名的话就没用，服务接收不到）
spring.application.name=stock-service
spring.cloud.nacos.config.server-addr=localhost:8848

# dataid 为 yaml 的文件扩展名配置方式
# `${spring.application.name}.${file-extension:properties}`
spring.cloud.nacos.config.file-extension=yaml

# 关闭配置动态的刷新
#spring.cloud.nacos.config.refresh-enabled=false

# profile粒度的配置   `${spring.application.name}-${profile}.${file-extension:properties}`
# stock-service-dev.yaml
spring.profiles.active=dev

# 自定义 namespace 的配置 -> 找该命名空间下的配置
# 控制后台去新建一个namespace（我新建后直接将public中的数据克隆过来）
spring.cloud.nacos.config.namespace=358a1a93-e6d3-43af-ab3b-166e24f7435a

spring.cloud.nacos.config.group=DEVELOP_GROUP

# 自定义 Data Id 的配置
# 不同工程的通用配置 支持共享的 DataId   redis
spring.cloud.nacos.config.shared-configs[0].data-id=common.yaml
spring.cloud.nacos.config.shared-configs[0].group=DEFAULT_GROUP
spring.cloud.nacos.config.shared-configs[0].refresh=true

# config external configuration
# 通过自定义扩展的 Data Id 配置，既可以解决多个应用间配置共享的问题，又可以支持一个应用有多个配置文件
spring.cloud.nacos.config.extension-configs[0].data-id=nacos.yaml
spring.cloud.nacos.config.extension-configs[0].group=REFRESH_GROUP
spring.cloud.nacos.config.extension-configs[0].refresh=true
# 多个 Data Id 同时配置时，他的优先级关系是 spring.cloud.nacos.config.extension-configs[n].data-id 其中 n 的值越大，优先级越高
spring.cloud.nacos.config.extension-configs[1].data-id=extend-01.yaml
spring.cloud.nacos.config.extension-configs[1].group=REFRESH_GROUP
spring.cloud.nacos.config.extension-configs[1].refresh=true

spring.cloud.nacos.config.extension-configs[2].data-id=testValue.yaml
spring.cloud.nacos.config.extension-configs[2].group=DEFAULT_GROUP
spring.cloud.nacos.config.extension-configs[2].refresh=true


# 优先级高低
# ${spring.application.name}-${profile}.${file-extension:properties}
# ${spring.application.name}.${file-extension:properties}
# ${spring.application.name}
# extensionConfigs
# sharedConfigs





